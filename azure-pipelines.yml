# Example starter pipline for Azure DevOps

trigger:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: publish
    displayName: Publish
    jobs:
      - job: publish
        displayName: Publish
        steps:
          - task: DotNetCoreCLI@2
            displayName: Restore .NET Tools
            inputs:
              command: custom
              custom: tool
              arguments: restore

          - task: DotNetCoreCLI@2
            displayName: Run Cake Build Script
            inputs:
              command: custom
              custom: cake
              arguments: --Target=Publish

          - task: PublishTestResults@2
            displayName: Publish Test Results
            inputs:
              failTaskOnFailedTests: true
              mergeTestResults: true
              testResultsFiles: Tests/**/TestResults/*.trx
              testResultsFormat: VSTest
              testRunTitle: Integration and Unit Tests

          - task: PublishCodeCoverageResults@1
            displayName: Publish Code Coverage Results
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: Artifacts/CoverageReports/Combined/Cobertura.xml
              failIfCoverageEmpty: true

          - task: ExtractFiles@1
            displayName: Extract
            inputs:
              archiveFilePatterns: 'Artifacts/Release/Scaffold.WebApi.zip'
              destinationFolder: 'Artifacts/Release/Scaffold.WebApi'
              cleanDestinationFolder: true
              overwriteExistingFiles: false

          - task: Docker@2
            displayName: Publish Container Image
            inputs:
              command: buildAndPush
              buildContext: Artifacts/Release/Scaffold.WebApi
              Dockerfile: Artifacts/Release/Scaffold.WebApi/Dockerfile
              containerRegistry: Docker Hub - Hannah Chan
              repository: hannahchan/scaffold
              tags: |
                latest
                $(Build.SourceVersion)

  - stage: staging
    displayName: Deploy to Staging
    jobs:
      - deployment: staging
        displayName: Deploy to Staging
        environment: Staging
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - script: echo "Deploying to Staging"
                - script: echo "Deployed to Staging"

  - stage: production
    displayName: Deploy to Production
    jobs:
      - deployment: production
        displayName: Deploy to Production
        environment: Production
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - script: echo "Deploying to Production"
                - script: echo "Deployed to Production"
